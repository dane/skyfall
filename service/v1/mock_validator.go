// Code generated by MockGen. DO NOT EDIT.
// Source: /app/service/v1/validator.go

// Package v1 is a generated GoMock package.
package v1

import (
	reflect "reflect"

	v1 "github.com/dane/skyfall/proto/gen/go/service/v1"
	gomock "github.com/golang/mock/gomock"
)

// MockValidator is a mock of Validator interface.
type MockValidator struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorMockRecorder
}

// MockValidatorMockRecorder is the mock recorder for MockValidator.
type MockValidatorMockRecorder struct {
	mock *MockValidator
}

// NewMockValidator creates a new mock instance.
func NewMockValidator(ctrl *gomock.Controller) *MockValidator {
	mock := &MockValidator{ctrl: ctrl}
	mock.recorder = &MockValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidator) EXPECT() *MockValidatorMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockValidator) CreateAccount(arg0 *v1.CreateAccountRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockValidatorMockRecorder) CreateAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockValidator)(nil).CreateAccount), arg0)
}

// DeleteAccount mocks base method.
func (m *MockValidator) DeleteAccount(arg0 *v1.DeleteAccountRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccount", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccount indicates an expected call of DeleteAccount.
func (mr *MockValidatorMockRecorder) DeleteAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockValidator)(nil).DeleteAccount), arg0)
}

// GetAccount mocks base method.
func (m *MockValidator) GetAccount(arg0 *v1.GetAccountRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockValidatorMockRecorder) GetAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockValidator)(nil).GetAccount), arg0)
}

// GetAccountByName mocks base method.
func (m *MockValidator) GetAccountByName(arg0 *v1.GetAccountByNameRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByName", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAccountByName indicates an expected call of GetAccountByName.
func (mr *MockValidatorMockRecorder) GetAccountByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByName", reflect.TypeOf((*MockValidator)(nil).GetAccountByName), arg0)
}

// SuspendAccount mocks base method.
func (m *MockValidator) SuspendAccount(arg0 *v1.SuspendAccountRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SuspendAccount", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SuspendAccount indicates an expected call of SuspendAccount.
func (mr *MockValidatorMockRecorder) SuspendAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuspendAccount", reflect.TypeOf((*MockValidator)(nil).SuspendAccount), arg0)
}

// UndeleteAccount mocks base method.
func (m *MockValidator) UndeleteAccount(arg0 *v1.UndeleteAccountRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UndeleteAccount", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UndeleteAccount indicates an expected call of UndeleteAccount.
func (mr *MockValidatorMockRecorder) UndeleteAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UndeleteAccount", reflect.TypeOf((*MockValidator)(nil).UndeleteAccount), arg0)
}

// UnsuspendAccount mocks base method.
func (m *MockValidator) UnsuspendAccount(arg0 *v1.UnsuspendAccountRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnsuspendAccount", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnsuspendAccount indicates an expected call of UnsuspendAccount.
func (mr *MockValidatorMockRecorder) UnsuspendAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsuspendAccount", reflect.TypeOf((*MockValidator)(nil).UnsuspendAccount), arg0)
}

// UpdateAccount mocks base method.
func (m *MockValidator) UpdateAccount(arg0 *v1.UpdateAccountRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccount", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccount indicates an expected call of UpdateAccount.
func (mr *MockValidatorMockRecorder) UpdateAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockValidator)(nil).UpdateAccount), arg0)
}

// VerifyAccount mocks base method.
func (m *MockValidator) VerifyAccount(arg0 *v1.VerifyAccountRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyAccount", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyAccount indicates an expected call of VerifyAccount.
func (mr *MockValidatorMockRecorder) VerifyAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyAccount", reflect.TypeOf((*MockValidator)(nil).VerifyAccount), arg0)
}
